# Nginx WebSocket proxy configuration for load balancing

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # WebSocket specific settings
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Upstream WebSocket servers
    upstream websocket_backend {
        # Sticky sessions based on IP
        ip_hash;
        
        # WebSocket servers
        server websocket:8765 max_fails=3 fail_timeout=30s;
        
        # Add more servers for scaling
        # server websocket2:8765 max_fails=3 fail_timeout=30s;
        # server websocket3:8765 max_fails=3 fail_timeout=30s;
        
        # Keep connections alive
        keepalive 32;
    }

    server {
        listen 8766;
        server_name _;

        # WebSocket proxy
        location / {
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}