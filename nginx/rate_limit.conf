# Nginx Rate Limiting Configuration for MT4 API

# Define rate limit zones
# $binary_remote_addr - client IP in binary format (more efficient)
# zone=ip_limit:10m - 10MB zone can store ~160,000 IP addresses
# rate=10r/s - 10 requests per second per IP

# General API rate limit (10 req/sec per IP)
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# Strict limit for expensive endpoints (1 req/sec per IP)
limit_req_zone $binary_remote_addr zone=expensive_limit:10m rate=1r/s;

# Limit by API key for authenticated requests
limit_req_zone $http_x_api_key zone=apikey_limit:10m rate=100r/s;

# Connection limit zones
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Request body size limit
client_max_body_size 1m;

# Server configuration
server {
    listen 80;
    server_name api.mt4.local;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Connection limits
    limit_conn conn_limit 10;  # Max 10 concurrent connections per IP
    
    # Default rate limiting with burst
    limit_req zone=api_limit burst=20 nodelay;
    
    # Custom error pages for rate limiting
    error_page 429 /429.json;
    location = /429.json {
        default_type application/json;
        return 429 '{"error":"Too Many Requests","message":"Rate limit exceeded. Please try again later.","retry_after":60}';
    }

    # Health check endpoint (no rate limit)
    location /health {
        limit_req off;
        limit_conn off;
        
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Public API endpoints (standard rate limit)
    location /api/v1/market/tick {
        # Standard rate limit applies (10r/s with burst of 20)
        
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Cache responses for 1 second
        proxy_cache api_cache;
        proxy_cache_valid 200 1s;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Multiple ticks endpoint (expensive, stricter limit)
    location /api/v1/market/ticks {
        limit_req zone=expensive_limit burst=5 nodelay;
        
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Streaming endpoint (requires API key)
    location /api/v1/market/stream {
        # Check for API key
        if ($http_x_api_key = "") {
            return 401 '{"error":"API key required"}';
        }
        
        # Rate limit by API key
        limit_req zone=apikey_limit burst=100 nodelay;
        
        # Disable buffering for SSE
        proxy_buffering off;
        proxy_cache off;
        
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        chunked_transfer_encoding off;
    }

    # Admin endpoints (IP whitelist + rate limit)
    location /api/v1/admin {
        # IP whitelist
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Stricter rate limit for admin endpoints
        limit_req zone=expensive_limit burst=10 nodelay;
        
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Account usage endpoint
    location /api/v1/account {
        # Check for API key
        if ($http_x_api_key = "") {
            return 401 '{"error":"API key required"}';
        }
        
        # Rate limit by API key
        limit_req zone=apikey_limit burst=50 nodelay;
        
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Catch all other requests
    location / {
        return 404 '{"error":"Not Found"}';
    }
}

# Cache configuration
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=1m use_temp_path=off;

# Upstream configuration with health checks
upstream api_backend {
    server localhost:5000 max_fails=3 fail_timeout=30s;
    
    # Add more servers for load balancing
    # server localhost:5001 max_fails=3 fail_timeout=30s;
    # server localhost:5002 max_fails=3 fail_timeout=30s;
    
    keepalive 32;
}

# SSL configuration (production)
server {
    listen 443 ssl http2;
    server_name api.mt4.yourdomain.com;

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/api.mt4.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.mt4.yourdomain.com/privkey.pem;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Include the same location blocks as above
    include /etc/nginx/sites-available/api_locations.conf;
}

# DDoS protection with fail2ban integration
# Log format for fail2ban
log_format rate_limit '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     '$limit_req_status';

access_log /var/log/nginx/api_access.log rate_limit;

# Additional security configurations

# Limit request methods
if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
    return 405;
}

# Block common attack patterns
location ~ /\. {
    deny all;
}

location ~ /\.git {
    deny all;
}

# Geo-based rate limiting (optional)
# geo $limit {
#     default 1;
#     10.0.0.0/8 0;
#     192.168.0.0/16 0;
#     203.0.113.0/24 2;  # Stricter limit for specific range
# }
# 
# map $limit $limit_key {
#     0 "";
#     1 $binary_remote_addr;
#     2 $binary_remote_addr;
# }
# 
# limit_req_zone $limit_key zone=geo_limit:10m rate=5r/s;