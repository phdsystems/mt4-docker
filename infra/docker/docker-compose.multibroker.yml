version: '3.8'

services:
  # Broker Manager Service
  broker-manager:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.python
    container_name: mt4_broker_manager
    command: python -m services.multibroker.broker_manager
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOG_LEVEL=INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./../../services:/app/services
      - broker_data:/data
    networks:
      - mt4_network
    restart: unless-stopped
    depends_on:
      - redis

  # Message Recorder Service
  message-recorder:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.python
    container_name: mt4_message_recorder
    command: python -m services.replay.message_replay record
    environment:
      - STORAGE_PATH=/recordings
      - ZMQ_ADDRESS=tcp://mt4:5556
      - LOG_LEVEL=INFO
    volumes:
      - ./../../services:/app/services
      - recordings:/recordings
    networks:
      - mt4_network
    restart: unless-stopped
    depends_on:
      - mt4

  # Message Replay Service
  message-replay:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.python
    container_name: mt4_message_replay
    command: python -m services.replay.message_replay replay
    environment:
      - STORAGE_PATH=/recordings
      - ZMQ_ADDRESS=tcp://*:5559
      - LOG_LEVEL=INFO
    ports:
      - "5559:5559"
    volumes:
      - ./../../services:/app/services
      - recordings:/recordings
    networks:
      - mt4_network
    restart: unless-stopped

  # Arbitrage Monitor
  arbitrage-monitor:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.python
    container_name: mt4_arbitrage_monitor
    command: python -m services.multibroker.arbitrage_monitor
    environment:
      - LOG_LEVEL=INFO
      - ALERT_WEBHOOK=${ALERT_WEBHOOK}
    volumes:
      - ./../../services:/app/services
    networks:
      - mt4_network
    restart: unless-stopped
    depends_on:
      - broker-manager

  # Multi-broker API
  multibroker-api:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.api
    container_name: mt4_multibroker_api
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=services.multibroker.api
      - FLASK_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./../../services:/app/services
    networks:
      - mt4_network
    restart: unless-stopped
    depends_on:
      - redis
      - broker-manager

volumes:
  broker_data:
    driver: local
  recordings:
    driver: local
  mt4_data_broker1:
    driver: local
  mt4_data_broker2:
    driver: local
  mt4_data_broker3:
    driver: local

networks:
  mt4_network:
    external: true