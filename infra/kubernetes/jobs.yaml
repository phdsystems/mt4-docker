apiVersion: batch/v1
kind: Job
metadata:
  name: mt4-init-job
  namespace: mt4-trading
  labels:
    app.kubernetes.io/name: mt4-init-job
    app.kubernetes.io/part-of: mt4-trading-system
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mt4-init-job
        app.kubernetes.io/part-of: mt4-trading-system
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      
      containers:
      - name: init
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Initializing MT4 environment..."
          
          # Create required directories
          mkdir -p /mt4/MQL4/Experts
          mkdir -p /mt4/MQL4/Libraries
          mkdir -p /mt4/MQL4/Logs
          mkdir -p /mt4/config
          
          # Set permissions
          chmod -R 755 /mt4
          
          echo "MT4 initialization complete"
        
        volumeMounts:
        - name: mt4-data
          mountPath: /mt4
      
      volumes:
      - name: mt4-data
        persistentVolumeClaim:
          claimName: mt4-data-pvc

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mt4-backup
  namespace: mt4-trading
  labels:
    app.kubernetes.io/name: mt4-backup
    app.kubernetes.io/part-of: mt4-trading-system
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: mt4-backup
            app.kubernetes.io/part-of: mt4-trading-system
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          
          containers:
          - name: backup
            image: google/cloud-sdk:alpine  # Or AWS CLI image
            command:
            - sh
            - -c
            - |
              set -e
              
              # Create backup timestamp
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_NAME="mt4-backup-${TIMESTAMP}"
              
              echo "Starting backup: ${BACKUP_NAME}"
              
              # Create backup archive
              tar -czf /tmp/${BACKUP_NAME}.tar.gz \
                -C /mt4 \
                MQL4/Logs \
                config
              
              # Upload to cloud storage (example for GCS)
              # gsutil cp /tmp/${BACKUP_NAME}.tar.gz gs://your-backup-bucket/mt4-backups/
              
              # For AWS S3:
              # aws s3 cp /tmp/${BACKUP_NAME}.tar.gz s3://your-backup-bucket/mt4-backups/
              
              echo "Backup completed: ${BACKUP_NAME}"
            
            env:
            # Add cloud credentials
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/gcp/key.json
            
            volumeMounts:
            - name: mt4-data
              mountPath: /mt4
              readOnly: true
            - name: gcp-key
              mountPath: /var/secrets/gcp
              readOnly: true
          
          volumes:
          - name: mt4-data
            persistentVolumeClaim:
              claimName: mt4-data-pvc
          - name: gcp-key
            secret:
              secretName: gcp-service-account

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mt4-cleanup
  namespace: mt4-trading
  labels:
    app.kubernetes.io/name: mt4-cleanup
    app.kubernetes.io/part-of: mt4-trading-system
spec:
  schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM
  concurrencyPolicy: Forbid
  
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: mt4-cleanup
            app.kubernetes.io/part-of: mt4-trading-system
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          
          containers:
          - name: cleanup
            image: busybox:1.35
            command:
            - sh
            - -c
            - |
              echo "Starting cleanup..."
              
              # Clean old log files (older than 30 days)
              find /mt4/MQL4/Logs -name "*.log" -mtime +30 -delete
              
              # Clean temporary files
              find /mt4 -name "*.tmp" -delete
              find /mt4 -name "*.bak" -delete
              
              # Report disk usage
              echo "Disk usage after cleanup:"
              df -h /mt4
              
              echo "Cleanup completed"
            
            volumeMounts:
            - name: mt4-data
              mountPath: /mt4
          
          volumes:
          - name: mt4-data
            persistentVolumeClaim:
              claimName: mt4-data-pvc

---
apiVersion: batch/v1
kind: Job
metadata:
  name: mt4-data-migration
  namespace: mt4-trading
  labels:
    app.kubernetes.io/name: mt4-data-migration
    app.kubernetes.io/part-of: mt4-trading-system
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mt4-data-migration
        app.kubernetes.io/part-of: mt4-trading-system
    spec:
      restartPolicy: OnFailure
      
      containers:
      - name: migrate
        image: migrate/migrate
        command:
        - migrate
        - -path
        - /migrations
        - -database
        - "redis://redis-service:6379"
        - up
        
        volumeMounts:
        - name: migrations
          mountPath: /migrations
      
      volumes:
      - name: migrations
        configMap:
          name: mt4-migrations